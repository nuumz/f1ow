// ===== MAIN SCSS FILE =====
// Using @use instead of @import for modern Sass

// 1. Variables and functions first
@use 'variables' as *;
@use 'functions' as *;

// 2. Base styles
@use 'base';

// 3. Layout utilities (must come before components that extend .page-container)
@use 'layout';

// 4. Components
@use 'buttons';
@use 'components';

// 5. Page-specific styles (after layout to access .page-container)
@use 'dashboard-core';
@use 'dashboard-metrics';
@use 'dashboard-charts';
@use 'workflow-pages';
@use 'workflow-templates';
@use 'workflow-versions';
@use 'execution-history';
@use 'credential-manager';
@use 'data-mapper';
@use 'expression-editor';

// 6. Legacy styles (will be refactored gradually)
// Note: Some of these styles will be moved to appropriate files later

/* Workflow Designer - Base global styles only */
.workflow-designer,
.advanced-workflow-designer {
  @include flex-column;
  height: 100%;
  width: 100%;
  max-width: 100vw;
  background: color(bg-light);
  position: relative;
  overflow-x: hidden;
  box-sizing: border-box;
}

.advanced-workflow-designer {
  height: 100vh;
}

.designer-header {
  @include flex-between;
  padding: spacing(4) spacing(6);
  background: white;
  border-bottom: 1px solid color(border-color);
  box-shadow: shadow(sm);
  z-index: z-index(header);
}

.designer-actions {
  display: flex;
  gap: spacing(4);
}

/* Designer Content */
.designer-content {
  display: flex;
  flex: 1;
  overflow: hidden;
  position: relative;
}

/* Connection Status - Consolidated */
.connection-status {
  @include flex-center;
  gap: spacing(2);
  padding: spacing(2) spacing(3);
  border-radius: border-radius(full);
  font-size: font-size(sm);
  font-weight: font-weight(medium);
  border: 1px solid color(border-color);
  background: white;
  transition: transition(base);

  &.connected {
    background: rgba(color(success), 0.1);
    border-color: color(success);
    color: color(success-dark);
  }

  &.connecting {
    background: rgba(color(warning), 0.1);
    border-color: color(warning);
    color: color(warning-dark);
  }

  &.disconnected {
    background: rgba(color(danger), 0.1);
    border-color: color(danger);
    color: color(danger-dark);
  }
}

.connection-status__indicator {
  width: 8px;
  height: 8px;
  border-radius: border-radius(full);
  background: color(gray-300);

  .connection-status--connected & {
    background: color(success);
    @include pulse(color(success));
  }

  .connection-status--connecting & {
    background: color(warning);
    @include pulse(color(warning));
  }

  .connection-status--disconnected & {
    background: color(danger);
  }
}

/* Canvas Container - Base styles only */
.canvas-container {
  flex: 1;
  position: relative;
  overflow: hidden;
  background: $canvas-bg;
  cursor: crosshair;

  svg {
    width: 100%;
    height: 100%;
  }
}

/* Connection Indicator */
.connection-indicator {
  @include absolute(spacing(5), null, null, 50%);
  transform: translateX(-50%);
  background: color(primary);
  color: white;
  padding: spacing(2) spacing(4);
  border-radius: border-radius(full);
  font-size: font-size(sm);
  z-index: z-index(tooltip);
  box-shadow: 0 2px 8px rgba(color(primary), 0.3);
  @include slide-in('down', 20px);
}

.execution-indicator {
  @include absolute(spacing(16), null, null, 50%);
  transform: translateX(-50%);
  background: color(warning);
  color: white;
  padding: spacing(2) spacing(4);
  border-radius: border-radius(full);
  font-size: font-size(sm);
  z-index: z-index(tooltip);
  box-shadow: 0 2px 8px rgba(color(warning), 0.3);
  @include slide-in('down', 20px);
}

/* Canvas Help - Consolidated */
.canvas-help {
  @include absolute(null, null, spacing(5), spacing(5));
  background: rgba(0, 0, 0, 0.8);
  color: white;
  padding: spacing(3) spacing(4);
  border-radius: border-radius(md);
  font-size: font-size(xs);
  z-index: z-index(tooltip);
  opacity: 0.8;
  transition: opacity transition(base);

  &:hover {
    opacity: 1;
  }

  p {
    margin: spacing(1) 0;
    line-height: line-height(normal);
  }
}

/* Enhanced Node Styles */
.node {
  cursor: move;
  transition: transition(base);
  z-index: z-index(nodes);
  position: relative;

  &:hover {
    filter: drop-shadow(0 4px 12px rgba(0,0,0,0.15));
    z-index: z-index(nodes) + 5;
  }

  &.selected {
    filter: drop-shadow(0 4px 12px rgba(color(success), 0.4));
    z-index: z-index(selection);
  }

  &.dragging {
    opacity: 0.8;
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
    z-index: z-index(selection);
    pointer-events: none;
  }
}

/* Node variants */
.standard-node,
.compact-node {
  z-index: z-index(nodes);
}

.node-background {
  transition: transition(base);
}

/* Port elements styling */
.input-port, .output-port {
  cursor: crosshair;
  transition: transition(base);
  z-index: z-index(ports);

  circle {
    transition: transition(base);
  }

  &:hover circle {
    r: $port-hover-size;
    stroke-width: 3;
    filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2));
  }

  &.connected circle {
    stroke-width: 3;
    filter: drop-shadow(0 2px 4px rgba(0,0,0,0.1));
  }
}

/* Bottom port styles - properly organized within groups */
.bottom-port-group {
  z-index: z-index(connections);
}

.bottom-port-diamond,
.bottom-port-connector,
.bottom-port-label-container {
  z-index: inherit;
}

.bottom-port-label-bg {
  fill: white;
  stroke: none;
}

.bottom-port-label {
  font-size: 10px;
  text-anchor: middle;
  dominant-baseline: central;
  fill: color(text-primary);
}

/* Plus button styles */
.plus-button-container {
  z-index: inherit;
  position: relative;
}

.plus-button {
  z-index: inherit;
}

.plus-button-bg {
  fill: color(primary);
  stroke: white;
  stroke-width: 2;
}

/* Node Background - Consolidated */
.node-bg {
  transition: transition(base);

  &:hover {
    filter: brightness(1.1);
  }

  &.running {
    stroke: color(status-running) !important;
    stroke-width: 3;
    animation: nodeRunning 1.5s infinite;
  }

  &.completed {
    stroke: color(status-completed) !important;
    stroke-width: 3;
  }

  &.error {
    stroke: color(status-failed) !important;
    stroke-width: 3;
    animation: nodeError 0.5s ease-in-out 3;
  }

  &.warning {
    stroke: color(status-warning) !important;
    stroke-width: 3;
    animation: nodeWarning 1s ease-in-out infinite;
  }
}

@keyframes nodeRunning {
  0%, 100% { stroke-opacity: 1; }
  50% { stroke-opacity: 0.5; }
}

@keyframes nodeError {
  0%, 100% { transform: translateX(0); }
  25% { transform: translateX(-2px); }
  75% { transform: translateX(2px); }
}

@keyframes nodeWarning {
  0%, 100% { stroke-opacity: 1; }
  50% { stroke-opacity: 0.7; }
}

/* Enhanced Connection Styles */
.connection {
  cursor: pointer;
  transition: transition(base);
  z-index: z-index(connections);

  &.selected path {
    stroke: color(success) !important;
    stroke-width: 3 !important;
    filter: drop-shadow(0 2px 4px rgba(color(success), 0.3));
  }
}

.animated-connection path {
  stroke-dasharray: 5,5;
  animation: connectionFlow 1s linear infinite;
}

@keyframes connectionFlow {
  from { stroke-dashoffset: 10; }
  to { stroke-dashoffset: 0; }
}

/* Node Palette - Base styles only */
.node-palette {
  width: $node-palette-width;
  background: white;
  border-right: 1px solid color(border-color);
  overflow-y: auto;
  box-shadow: shadow(md);
  z-index: z-index(sidebar);
  @include custom-scrollbar;
}

/* Node Editor Panel - Base styles only */
.node-editor-panel {
  width: $node-editor-width;
  background: white;
  border-left: 1px solid color(border-color);
  overflow-y: auto;
  box-shadow: shadow(md);
  z-index: z-index(sidebar);
  @include custom-scrollbar;
}

/* Selection Box */
.selection-box {
  fill: rgba(color(success), 0.1);
  stroke: color(success);
  stroke-width: 1;
  stroke-dasharray: 5,5;
  pointer-events: none;
}

/* Minimap */
.minimap {
  @include absolute(null, spacing(5), spacing(5), null);
  width: 200px;
  height: 150px;
  background: rgba(255, 255, 255, 0.9);
  border: 1px solid color(border-color);
  border-radius: border-radius(md);
  box-shadow: shadow(lg);
  z-index: z-index(tooltip);
}

.minimap-header {
  padding: spacing(2);
  border-bottom: 1px solid color(border-color);
  font-size: font-size(xs);
  font-weight: font-weight(medium);
  color: color(text-secondary);
}

.minimap-canvas {
  width: 100%;
  height: calc(100% - 30px);
}

// Utility classes
.text-truncate {
  @include text-truncate;
}

.visually-hidden {
  @include visually-hidden;
}

// Animation utilities
.fade-in {
  @include fade-in;
}

.slide-in-up {
  @include slide-in('up');
}

.slide-in-down {
  @include slide-in('down');
}

.slide-in-left {
  @include slide-in('left');
}

.slide-in-right {
  @include slide-in('right');
}

// Color utilities
@each $name, $value in $colors {
  .text-#{$name} {
    color: $value;
  }
  
  .bg-#{$name} {
    background-color: $value;
  }
  
  .border-#{$name} {
    border-color: $value;
  }
}

// Font utilities
@each $name, $value in $font-sizes {
  .text-#{$name} {
    font-size: $value;
  }
}

@each $name, $value in $font-weights {
  .font-#{$name} {
    font-weight: $value;
  }
}

// Border radius utilities
@each $name, $value in $border-radius {
  .rounded-#{$name} {
    border-radius: $value;
  }
}

// Shadow utilities
@each $name, $value in $shadows {
  .shadow-#{$name} {
    box-shadow: $value;
  }
}